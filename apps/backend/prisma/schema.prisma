// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id           String   @id @default(uuid()) @db.Uuid
  email        String   @unique
  passwordHash String?  @map("password_hash")
  googleId     String?  @map("google_id")
  role         String   @default("user")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  sessions      Session[]
  subscription  Subscription?
  payments      Payment[]
  chatThreads   ChatThread[]
  dailyUsage    DailyUsage[]
  monthlyUsage  MonthlyUsage[]
  yearlyUsage   YearlyUsage[]
  passwordReset PasswordReset[]

  @@map("users")
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @map("user_id") @db.Uuid
  refreshToken String   @unique @map("refresh_token")
  expiresAt    DateTime @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
}

model Plan {
  id             String  @id
  dailyChatLimit Int?    @map("daily_chat_limit")
  stripePriceId  String? @map("stripe_price_id")

  // Relations
  subscriptions Subscription[]

  @@map("plans")
}

model Subscription {
  id                   String    @id @default(uuid()) @db.Uuid
  userId               String    @unique @map("user_id") @db.Uuid
  planId               String    @default("free") @map("plan_id")
  status               String    // active, canceled, past_due, etc.
  paymentMethod        String?   @map("payment_method") // stripe, mercado_pago, kiwify
  
  // Gateway-specific IDs
  stripeCustomerId     String?   @map("stripe_customer_id")
  stripeSubscriptionId String?   @map("stripe_subscription_id")
  mercadoPagoCustomerId String?  @map("mercado_pago_customer_id")
  mercadoPagoSubscriptionId String? @map("mercado_pago_subscription_id")
  kiwifyCustomerId     String?   @map("kiwify_customer_id")
  kiwifySubscriptionId String?   @map("kiwify_subscription_id")
  
  // Subscription details
  currentPeriodStart   DateTime? @map("current_period_start")
  currentPeriodEnd     DateTime? @map("current_period_end")
  nextBillingDate      DateTime? @map("next_billing_date")
  cancelAtPeriodEnd    Boolean   @default(false) @map("cancel_at_period_end")
  canceledAt           DateTime? @map("canceled_at")
  
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan     Plan      @relation(fields: [planId], references: [id])
  payments Payment[]

  @@index([userId])
  @@index([planId])
  @@index([status])
  @@index([paymentMethod])
  @@index([createdAt])
  @@map("subscriptions")
}

model Payment {
  id             String      @id @default(uuid()) @db.Uuid
  userId         String      @map("user_id") @db.Uuid
  subscriptionId String?     @map("subscription_id") @db.Uuid
  amount         Decimal     @db.Decimal(10, 2)
  currency       String      @default("usd")
  status         String      // succeeded, failed, pending, refunded
  type           String      // subscription, one_time, refund
  paymentMethod  String      @map("payment_method") // stripe, mercado_pago, kiwify
  description    String?
  
  // Gateway-specific transaction IDs
  stripePaymentIntentId String? @map("stripe_payment_intent_id")
  stripeChargeId String?     @map("stripe_charge_id")
  mercadoPagoPaymentId String? @map("mercado_pago_payment_id")
  kiwifyTransactionId  String? @map("kiwify_transaction_id")
  
  // Gateway response data
  gatewayResponse Json?      @map("gateway_response") @db.Json
  metadata       Json?       @db.Json
  
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription Subscription? @relation(fields: [subscriptionId], references: [id])

  @@index([userId])
  @@index([subscriptionId])
  @@index([status])
  @@index([type])
  @@index([paymentMethod])
  @@index([createdAt])
  @@map("payments")
}

model ChatThread {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  title     String?
  summary   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages ChatMessage[]

  @@index([userId])
  @@index([createdAt])
  @@map("chat_threads")
}

model ChatMessage {
  id               String   @id @default(uuid()) @db.Uuid
  threadId         String   @map("thread_id") @db.Uuid
  role             String
  content          String
  tokensInput      Int      @default(0) @map("tokens_input")
  tokensOutput     Int      @default(0) @map("tokens_output")
  tokensEmbedding  Int      @default(0) @map("tokens_embedding")
  costUsd          Decimal  @default(0) @map("cost_usd") @db.Decimal(10, 6)
  embeddingCostUsd Decimal  @default(0) @map("embedding_cost_usd") @db.Decimal(10, 6)
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  thread ChatThread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([threadId])
  @@index([role])
  @@index([createdAt])
  @@index([threadId, createdAt])
  @@map("chat_messages")
}

model Source {
  id        String   @id @default(uuid()) @db.Uuid
  title     String
  rawText   String   @map("raw_text")
  tags      String[]
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  chunks SourceChunk[]

  @@map("sources")
}

model SourceChunk {
  id         String                        @id @default(uuid()) @db.Uuid
  sourceId   String                        @map("source_id") @db.Uuid
  chunkIndex Int                           @map("chunk_index")
  text       String
  embedding  Unsupported("vector(1536)")

  // Relations
  source Source @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  @@map("source_chunks")
}

model DailyUsage {
  userId           String  @map("user_id") @db.Uuid
  date             DateTime @db.Date
  chatsCount       Int     @default(0) @map("chats_count")
  messagesCount    Int     @default(0) @map("messages_count")
  tokensInput      Int     @default(0) @map("tokens_input")
  tokensOutput     Int     @default(0) @map("tokens_output")
  tokensEmbedding  Int     @default(0) @map("tokens_embedding")
  costUsd          Decimal @default(0) @map("cost_usd") @db.Decimal(12, 6)
  embeddingCostUsd Decimal @default(0) @map("embedding_cost_usd") @db.Decimal(12, 6)
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, date])
  @@index([date])
  @@index([userId, date])
  @@map("daily_usage")
}

model MonthlyUsage {
  userId           String  @map("user_id") @db.Uuid
  year             Int
  month            Int
  chatsCount       Int     @default(0) @map("chats_count")
  messagesCount    Int     @default(0) @map("messages_count")
  tokensInput      Int     @default(0) @map("tokens_input")
  tokensOutput     Int     @default(0) @map("tokens_output")
  tokensEmbedding  Int     @default(0) @map("tokens_embedding")
  costUsd          Decimal @default(0) @map("cost_usd") @db.Decimal(12, 6)
  embeddingCostUsd Decimal @default(0) @map("embedding_cost_usd") @db.Decimal(12, 6)
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, year, month])
  @@index([year, month])
  @@index([userId, year, month])
  @@map("monthly_usage")
}

model YearlyUsage {
  userId           String  @map("user_id") @db.Uuid
  year             Int
  chatsCount       Int     @default(0) @map("chats_count")
  messagesCount    Int     @default(0) @map("messages_count")
  tokensInput      Int     @default(0) @map("tokens_input")
  tokensOutput     Int     @default(0) @map("tokens_output")
  tokensEmbedding  Int     @default(0) @map("tokens_embedding")
  costUsd          Decimal @default(0) @map("cost_usd") @db.Decimal(12, 6)
  embeddingCostUsd Decimal @default(0) @map("embedding_cost_usd") @db.Decimal(12, 6)
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, year])
  @@index([year])
  @@index([userId, year])
  @@map("yearly_usage")
}

// Global system analytics aggregations
model SystemDailyStats {
  date             DateTime @id @db.Date
  totalUsers       Int      @default(0) @map("total_users")
  activeUsers      Int      @default(0) @map("active_users")
  newUsers         Int      @default(0) @map("new_users")
  chatsCount       Int      @default(0) @map("chats_count")
  messagesCount    Int      @default(0) @map("messages_count")
  tokensInput      Int      @default(0) @map("tokens_input")
  tokensOutput     Int      @default(0) @map("tokens_output")
  tokensEmbedding  Int      @default(0) @map("tokens_embedding")
  costUsd          Decimal  @default(0) @map("cost_usd") @db.Decimal(12, 6)
  embeddingCostUsd Decimal  @default(0) @map("embedding_cost_usd") @db.Decimal(12, 6)
  revenueUsd       Decimal  @default(0) @map("revenue_usd") @db.Decimal(12, 2)
  freeUsers        Int      @default(0) @map("free_users")
  proUsers         Int      @default(0) @map("pro_users")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@index([date])
  @@map("system_daily_stats")
}

model SystemMonthlyStats {
  year             Int
  month            Int
  totalUsers       Int      @default(0) @map("total_users")
  activeUsers      Int      @default(0) @map("active_users")
  newUsers         Int      @default(0) @map("new_users")
  chatsCount       Int      @default(0) @map("chats_count")
  messagesCount    Int      @default(0) @map("messages_count")
  tokensInput      Int      @default(0) @map("tokens_input")
  tokensOutput     Int      @default(0) @map("tokens_output")
  tokensEmbedding  Int      @default(0) @map("tokens_embedding")
  costUsd          Decimal  @default(0) @map("cost_usd") @db.Decimal(12, 6)
  embeddingCostUsd Decimal  @default(0) @map("embedding_cost_usd") @db.Decimal(12, 6)
  revenueUsd       Decimal  @default(0) @map("revenue_usd") @db.Decimal(12, 2)
  freeUsers        Int      @default(0) @map("free_users")
  proUsers         Int      @default(0) @map("pro_users")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@id([year, month])
  @@index([year, month])
  @@map("system_monthly_stats")
}

model SystemYearlyStats {
  year             Int      @id
  totalUsers       Int      @default(0) @map("total_users")
  activeUsers      Int      @default(0) @map("active_users")
  newUsers         Int      @default(0) @map("new_users")
  chatsCount       Int      @default(0) @map("chats_count")
  messagesCount    Int      @default(0) @map("messages_count")
  tokensInput      Int      @default(0) @map("tokens_input")
  tokensOutput     Int      @default(0) @map("tokens_output")
  tokensEmbedding  Int      @default(0) @map("tokens_embedding")
  costUsd          Decimal  @default(0) @map("cost_usd") @db.Decimal(12, 6)
  embeddingCostUsd Decimal  @default(0) @map("embedding_cost_usd") @db.Decimal(12, 6)
  revenueUsd       Decimal  @default(0) @map("revenue_usd") @db.Decimal(12, 2)
  freeUsers        Int      @default(0) @map("free_users")
  proUsers         Int      @default(0) @map("pro_users")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@index([year])
  @@map("system_yearly_stats")
}

model PasswordReset {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  usedAt    DateTime? @map("used_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}