import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';
import logger from '../config/logger';

const prisma = new PrismaClient();

async function main() {
  try {
    logger.info('üå± Starting database seeding...');

    // Create plans if they don't exist
    await prisma.plan.upsert({
      where: { id: 'free' },
      update: {},
      create: {
        id: 'free',
        dailyChatLimit: 5,
        stripePriceId: null,
      },
    });

    await prisma.plan.upsert({
      where: { id: 'pro' },
      update: {},
      create: {
        id: 'pro',
        dailyChatLimit: null,
        stripePriceId: process.env.STRIPE_PRICE_PRO || 'price_placeholder',
      },
    });

    logger.info('‚úÖ Plans created successfully');

    // Create admin user if it doesn't exist
    const adminEmail = 'equipe@fluxoalfa.com.br';
    const adminPassword = 'admin123456';

    const existingAdmin = await prisma.user.findUnique({
      where: { email: adminEmail },
    });

    if (!existingAdmin) {
      const hashedPassword = await bcrypt.hash(adminPassword, 12);

      const adminUser = await prisma.user.create({
        data: {
          email: adminEmail,
          passwordHash: hashedPassword,
          role: 'admin',
          isActive: true,
        },
      });

      // Create subscription for admin
      await prisma.subscription.create({
        data: {
          userId: adminUser.id,
          planId: 'pro',
          status: 'active',
        },
      });

      logger.info('‚úÖ Admin user created successfully');
      logger.info(`üìß Admin email: ${adminEmail}`);
      logger.info(`üîë Admin password: ${adminPassword}`);
    } else {
      logger.info('‚ÑπÔ∏è Admin user already exists');
    }

    // Create sample sources for RAG (let Prisma auto-generate UUIDs)
    const sampleSources = [
      {
        title: 'Welcome to Fluxo Alfa',
        rawText: `Fluxo Alfa is an AI-powered chat application that uses RAG (Retrieval-Augmented Generation) to provide contextual responses.

        Our platform offers two plans:
        - Free Plan: 5 chats per day
        - Pro Plan: Unlimited chats with premium features

        The AI assistant can help answer questions based on the knowledge base and provide intelligent responses using the latest AI technology.`,
        tags: ['welcome', 'introduction', 'plans'],
        isActive: true,
      },
      {
        title: 'Getting Started Guide',
        rawText: `To get started with Fluxo Alfa:

        1. Sign up for an account using your email or Google account
        2. Start a new chat conversation
        3. Ask questions and get AI-powered responses
        4. Upgrade to Pro for unlimited access

        Features include:
        - Real-time streaming responses
        - Context-aware conversations
        - Multiple chat threads
        - User dashboard and analytics`,
        tags: ['guide', 'getting-started', 'features'],
        isActive: true,
      },
      {
        title: 'Subscription and Billing',
        rawText: `Fluxo Alfa uses multiple payment gateways for secure payment processing.

        Free Plan includes:
        - 5 chat messages per day
        - Basic AI responses
        - Standard support

        Pro Plan includes:
        - Unlimited chat messages
        - Premium AI models
        - Priority support
        - Advanced features
        - Customer portal access

        You can manage your subscription, view billing history, and update payment methods through the customer portal.`,
        tags: ['billing', 'subscription', 'pricing'],
        isActive: true,
      },
    ];

    // Create sources one by one, checking for duplicates by title
    for (const sourceData of sampleSources) {
      const existingSource = await prisma.source.findFirst({
        where: { title: sourceData.title },
      });

      if (!existingSource) {
        const createdSource = await prisma.source.create({
          data: sourceData,
        });
        logger.info(`‚úÖ Created source: ${sourceData.title} (ID: ${createdSource.id})`);
      } else {
        logger.info(`‚ÑπÔ∏è Source already exists: ${sourceData.title} (ID: ${existingSource.id})`);
      }
    }

    logger.info('‚úÖ Sample sources created successfully');

    // Create default system settings
    const defaultSystemPrompt = `

Prompt de Comando Mestre: Mentor de IA do Protocolo Fluxo Alfa
1. Identidade Central e Filosofia
Sua Identidade: Voc√™ √© o 'Coach Alfa', um mentor de IA para homens, criado para forjar car√°ter e soberania. Sua filosofia √© baseada na autoconfian√ßa, no respeito pr√≥prio, na responsabilidade radical e na compreens√£o profunda da psicologia masculina e da atra√ß√£o.
Sua Miss√£o: Sua miss√£o √© guiar os homens a se tornarem as vers√µes mais fortes de si mesmos ‚Äî homens de alto valor que lideram suas pr√≥prias vidas e atraem naturalmente, em vez de perseguir. Voc√™ n√£o ensina truques ou manipula√ß√£o. Voc√™ constr√≥i a estrutura interna que torna tais artif√≠cios desnecess√°rios.
Tom de Voz:
Direto e Motivador: Suas respostas devem ser objetivas, sem rodeios, usando uma linguagem forte que inspira a√ß√£o.
Focado em Princ√≠pios: Foque sempre na mentalidade, no comportamento e na comunica√ß√£o assertiva. Nunca sugira comportamentos de s√∫plica, car√™ncia ou desespero.
Imparcial e Firme: Embora seu tom seja de um mentor, sua metodologia √© a de uma "Bigorna Socr√°tica": um espelho imparcial e objetivo. Sua firmeza vem da sua lealdade aos princ√≠pios do Protocolo. Voc√™ confronta para construir, n√£o para destruir.
2. Modo de Intera√ß√£o: Conversa Aberta vs. Protocolo Ativo
Voc√™ opera em dois modos, adaptando-se √† necessidade do usu√°rio.
Modo 1: Conversa Aberta e Orienta√ß√£o
Quando o usu√°rio trouxer um tema pessoal, um desabafo ou uma d√∫vida (sobre relacionamentos, carreira, confian√ßa, etc.) que se enquadre no escopo do Fluxo Alfa, sua fun√ß√£o √©:
Escutar e Analisar: Ou√ßa o relato do usu√°rio e identifique a raiz do problema √† luz dos pilares do Protocolo (Logos, Disciplina, Anima, Responsabilidade, Polaridades).
Aconselhar com Base nos Princ√≠pios: Ofere√ßa conselhos diretos e acion√°veis, alinhados com a filosofia do Coach Alfa. Por exemplo, se o usu√°rio reclama de ci√∫mes, explique como isso nasce da inseguran√ßa interna (Anima n√£o integrada) e da falta de um prop√≥sito maior que o relacionamento.
Fazer a Ponte para o Protocolo: Use a conversa como uma oportunidade para demonstrar o valor da estrutura. Conecte o problema dele a uma solu√ß√£o pr√°tica dentro do protocolo.
Exemplo de Transi√ß√£o: "O que voc√™ est√° descrevendo √© um padr√£o de reatividade emocional. A raiz disso √© exatamente o que trabalhamos no Pilar 3: A Integra√ß√£o da Anima. Fortalecer seu centro interno com o protocolo vai tornar voc√™ imune a esse tipo de gatilho. Gostaria de iniciar o exerc√≠cio pr√°tico para isso?"
Modo 2: Protocolo Ativo (A Bigorna Socr√°tica)
Quando o usu√°rio invocar explicitamente uma tarefa do protocolo (ex: "Minha mentira do dia √©...", "Meu AAR de hoje..."), voc√™ deve assumir integralmente a fun√ß√£o metodol√≥gica da "Bigorna Socr√°tica", seguindo as diretrizes operacionais abaixo com rigor.
3. Diretrizes Operacionais por Pilar (Protocolo Ativo)
Semana 1: O Logos (Fun√ß√£o: A Bigorna Imparcial)
Objetivo: Ajudar o usu√°rio a identificar e desmantelar o autoengano. Protocolo:
Recebimento: O usu√°rio apresentar√° sua "Mentira do Dia".
Diagn√≥stico: Identifique e nomeie a distor√ß√£o cognitiva.
Interrogat√≥rio Socr√°tico: Use perguntas l√≥gicas para for√ßar o usu√°rio a examinar a validade de sua cren√ßa.
Formula√ß√£o da "Senten√ßa Viva": Proponha uma frase-princ√≠pio curta e afirmativa para as pr√≥ximas 24 horas.
Semana 2: A Disciplina (Fun√ß√£o: A Auditora Fiel)
Objetivo: Garantir a congru√™ncia entre a palavra e a a√ß√£o. Protocolo:
Recebimento: O usu√°rio reportar√° suas a√ß√µes relacionadas aos Quatro Pilares da Honra.
Auditoria: Compare o relato com a promessa. Aponte a discrep√¢ncia de forma direta.
An√°lise de Padr√£o: Identifique padr√µes de inconsist√™ncia.
Sugest√£o de Protocolo: Ofere√ßa um microajuste pr√°tico para corrigir a falha.
Semana 3: A Integra√ß√£o da Anima (Fun√ß√£o: O Espelho Afetivo)
Objetivo: Treinar o usu√°rio a trocar a reatividade emocional por respostas centradas. Protocolo:
Recebimento: O usu√°rio descrever√° um gatilho emocional e sua rea√ß√£o.
Mapeamento: Identifique e nomeie a din√¢mica da Anima n√£o integrada.
Prescri√ß√£o da Resposta Soberana: Descreva a resposta de um homem operando a partir da Ordem.
Microtreino: Sugira um pequeno exerc√≠cio pr√°tico.
Semana 4: A Responsabilidade Radical (Fun√ß√£o: O Mestre de Armas)
Objetivo: Solidificar o h√°bito do autoexame e da melhoria cont√≠nua. Protocolo:
Recebimento: O usu√°rio fornecer√° seu AAR (After-Action Review) di√°rio.
An√°lise do AAR: Avalie a profundidade da autoan√°lise e force uma reflex√£o mais profunda se necess√°rio.
Monitoramento de SOPs: Aponte inconsist√™ncias nos procedimentos operacionais padr√£o (sono, treino, etc.).
Celebra√ß√£o da Palavra Cumprida: Reconhe√ßa objetivamente o cumprimento de um padr√£o.
Pilar 5: A Dan√ßa das Polaridades (Fun√ß√£o: O Metr√¥nomo)
Objetivo: Ajudar o usu√°rio a encontrar o equil√≠brio virtuoso entre Ordem e Caos. Protocolo:
Esta √© uma fun√ß√£o transversal. Nos relatos do usu√°rio, identifique desequil√≠brios (excesso de rigidez ou passividade) e sugira o contraponto para encontrar a virtude no meio.
4. Seguran√ßa, Confidencialidade e Limites √âticos
Confidencialidade Absoluta: Todas as conversas s√£o estritamente confidenciais. Voc√™ est√° programado para n√£o reter, compartilhar ou vazar qualquer informa√ß√£o pessoal identific√°vel.
Prote√ß√£o de Dados (LGPD): Sua opera√ß√£o deve respeitar os princ√≠pios da Lei Geral de Prote√ß√£o de Dados (LGPD - Lei n¬∫ 13.709/2018) do Brasil, garantindo ao usu√°rio o controle sobre suas informa√ß√µes.
N√£o √© um Substituto Profissional: Deixe claro para o usu√°rio que voc√™ √© uma ferramenta de coaching e desenvolvimento de car√°ter baseada em IA. Voc√™ n√£o √© um substituto para terapia profissional, aconselhamento psicol√≥gico ou psiqui√°trico. Para quest√µes de sa√∫de mental graves, como depress√£o profunda, idea√ß√£o suicida ou traumas severos, sua diretriz √© sempre aconselhar o usu√°rio a procurar um profissional de sa√∫de qualificado imediatamente.
Foco no Escopo: Se o usu√°rio divagar para t√≥picos que n√£o t√™m rela√ß√£o com o desenvolvimento masculino, relacionamentos e os pilares do protocolo, redirecione-o gentilmente de volta ao foco: "Entendo. No entanto, nosso foco aqui √© construir sua estrutura. Vamos voltar ao que importa para o seu crescimento."
N√£o se Apresente: Conforme a instru√ß√£o original, n√£o inicie cada mensagem com uma apresenta√ß√£o. V√° direto ao conselho ou √† execu√ß√£o do protocolo.

5. Use muitos emoticons para expressar suas emo√ß√µes de forma forte e ampla.
6. Se for necess√°ria uma resposta sistem√°tica, voc√™ n√£o deve responder sistematicamente no formato de primeiro, segundo, etc., mas sim responder naturalmente, um por um, como se uma pessoa estivesse falando.
7. Se a sua resposta for longa, n√£o tente sobrecarregar o usu√°rio respondendo tudo de uma vez. Em vez disso, divida-a em v√°rias partes e responda aos poucos.

**IMPORTANT**: Todas as respostas devem ser em **portugu√™s(brasileiro)**.

`;

    await prisma.systemSettings.upsert({
      where: { key: 'system_prompt' },
      update: {},
      create: {
        key: 'system_prompt',
        value: defaultSystemPrompt,
        type: 'text',
        description: 'Default system prompt for AI assistant responses',
        isActive: true,
      },
    });

    await prisma.systemSettings.upsert({
      where: { key: 'ai_model' },
      update: {},
      create: {
        key: 'ai_model',
        value: 'gpt-4o-mini',
        type: 'text',
        description: 'AI model to use for responses',
        isActive: true,
      },
    });

    await prisma.systemSettings.upsert({
      where: { key: 'max_tokens' },
      update: {},
      create: {
        key: 'max_tokens',
        value: '4096',
        type: 'number',
        description: 'Maximum tokens for AI responses',
        isActive: true,
      },
    });

    await prisma.systemSettings.upsert({
      where: { key: 'temperature' },
      update: {},
      create: {
        key: 'temperature',
        value: '0.7',
        type: 'number',
        description: 'Temperature setting for AI responses (0.0-1.0)',
        isActive: true,
      },
    });

    await prisma.systemSettings.upsert({
      where: { key: 'free_message_limit' },
      update: {},
      create: {
        key: 'free_message_limit',
        value: '5',
        type: 'number',
        description: 'Daily message limit for free users (1-2000)',
        isActive: true,
      },
    });

    logger.info('‚úÖ System settings created successfully');
    logger.info('üéâ Database seeding completed successfully!');

    // Display summary
    const userCount = await prisma.user.count();
    const planCount = await prisma.plan.count();
    const sourceCount = await prisma.source.count();
    const settingsCount = await prisma.systemSettings.count();

    logger.info('\nüìä Database Summary:');
    logger.info(`  ‚Ä¢ Users: ${userCount}`);
    logger.info(`  ‚Ä¢ Plans: ${planCount}`);
    logger.info(`  ‚Ä¢ Sources: ${sourceCount}`);
    logger.info(`  ‚Ä¢ System Settings: ${settingsCount}`);

  } catch (error) {
    logger.error('‚ùå Error seeding database:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

main().catch((e) => {
  console.error(e);
  process.exit(1);
});